//RDBMS: relational database tabular data, tables(entity eg person),columns(schemas eg,username,age),rows
(actual data)

//Mongodb is NoSQL(non-relational) no defined schema ,no tabular,no relationship between data
//Mongodb adds a key to each document _id
// database: one/more collections
//collections:  group of documents
//document : set of key-value pair eg, {firstName: Serah}
//schema: structure or organization of data within a document
//use <database name> to create a new database or pick existing database
//db.dropdatabase:to drop an existing database
//db:which database you are in
//BSON: binary encoded json has some added data types eg timestamp,date,object _id
//json key value easy to parse

1.INSERTING DOCUMENTS
/every document has a unique value _id
//the _id can be changed not recommended
//db.collectionname.insertone({}) : insert one document
//db.collectionname.insertmany([{},{}]) : insert multiple documents

2.UPDATE DOCUMENTS
//update one document
db.collectionname.updateone(
    {name:"name},
    {
        $set:{
            name:"name",
            isActive: true
        }
    }
)
//db.collection.replaceOne()
Replaces at most a single document that match a specified filter 
even though multiple documents may match the specified filter.
//db.collection.updateMany()
Update all documents that match a specified filter.

3.READ data
//find():find all documents i n collection
//db.collection.findone():first document
//db.leads.find({"city":"Nairobi"}):retuns all documents that has that filter city
//db.leads.findOneAndReplace({"name":"Serah"},{"mobile":"0740968703"})//replacing  with tha filter
//db.leads.findOneAndUpdate({"name":"Joy"},{$set:{address:"Kikuyu"}})//updating document with that filter
//db.leads.findOneAndDelete({"name":"Serah"})//deleting document with Serah

4.DELETE data
//db.collection.deleteone():delete one document
//db.collection.deleteMany({}):delete all documents

5.QUERIES
//implemented using find method logical and equality operators
//eq-equality
//lt-less than
//lte-less than equal
//gt-greater than
//gte-greater than equal
//$and $or $not 
//db.leads.find({"tax":{$lte:"30"}}):find documents where tax is less than or equal to 30
//same as db.leads.find("tax":"30")
//db.leads.find({$and:[{"tax":{$lte:"30"}},{"salary":{$lte:"120000"}}]})-finding multiple conditions by use of and operators
//same as db.leads.find({"tax":"30"},{"salary":"120000"})
//db.leads.find({$or:[{"tax":"30"},{"salary":"100000"}]})-or twp conditions
//db.leads.updateOne({name:"Serah"},{$unset:{mobile:"0740968703"}})-unset a field
//db.leads.updateOne({name:"Serah"},{$inc:{age:2}})-increment a field
//db.leads.find({tax:{$exists:true}})-all fields with tax field
 
 6.ARRAYS
 //array operators:
 //$in-find if operator checks if at least one value from a specified array exists in the target field.
 //$all- ensures that all values provided in the query exist within the target array.
//$size- finds documents where the array contains an exact number of elements.
//^-	Matches the start of a string. 
$	-Matches the end of a string.db.students.find({ name: { $regex: "^A" } });//all students starting with a
.*	-Matches any characters (wildcard)

7.HIDING OR GETTING SPECIFIC fields
//db.leads.find({},{name:1 ,_id:0})-find name field only hide id with 0
