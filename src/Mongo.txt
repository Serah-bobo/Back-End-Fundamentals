//RDBMS: relational database tabular data, tables(entity eg person),columns(schemas eg,username,age),rows
(actual data)

//Mongodb is NoSQL(non-relational) no defined schema ,no tabular,no relationship between data
//Mongodb adds a key to each document _id
// database: one/more collections
//collections:  group of documents
//document : set of key-value pair eg, {firstName: Serah}
//schema: structure or organization of data within a document
//use <database name> to create a new database or pick existing database
//db.dropdatabase:to drop an existing database
//db:which database you are in
//BSON: binary encoded json has some added data types eg timestamp,date,object _id
//json key value easy to parse

1.INSERTING DOCUMENTS
/every document has a unique value _id
//the _id can be changed not recommended
//db.collectionname.insertone({}) : insert one document
//db.collectionname.insertmany([{},{}]) : insert multiple documents

2.UPDATE DOCUMENTS
//update one document
db.collectionname.updateone(
    {name:"name},
    {
        $set:{
            name:"name",
            isActive: true
        }
    }
)
//db.collection.replaceOne()
Replaces at most a single document that match a specified filter 
even though multiple documents may match the specified filter.
//db.collection.updateMany()
Update all documents that match a specified filter.

3.READ data
//find():find all documents i n collection
//db.collection.findone():first document
//db.leads.find({"city":"Nairobi"}):retuns all documents that has that filter city
//db.leads.findOneAndReplace({"name":"Serah"},{"mobile":"0740968703"})//replacing  with tha filter
//db.leads.findOneAndUpdate({"name":"Joy"},{$set:{address:"Kikuyu"}})//updating document with that filter
//db.leads.findOneAndDelete({"name":"Serah"})//deleting document with Serah

4.DELETE data
//db.collection.deleteone():delete one document
//db.collection.deleteMany({}):delete all documents

5.QUERIES
//implemented using find method logical and equality operators
//eq-equality
//lt-less than
//lte-less than equal
//gt-greater than
//gte-greater than equal
//$and $or $not 
//db.leads.find({"tax":{$lte:"30"}}):find documents where tax is less than or equal to 30
//same as db.leads.find("tax":"30")
//db.leads.find({$and:[{"tax":{$lte:"30"}},{"salary":{$lte:"120000"}}]})-finding multiple conditions by use of and operators
//same as db.leads.find({"tax":"30"},{"salary":"120000"})
//db.leads.find({$or:[{"tax":"30"},{"salary":"100000"}]})-or twp conditions
//db.leads.updateOne({name:"Serah"},{$unset:{mobile:"0740968703"}})-unset a field
//db.leads.updateOne({name:"Serah"},{$inc:{age:2}})-increment a field
//db.leads.find({tax:{$exists:true}})-all fields with tax field
 
 6.ARRAYS
 //array operators:
 //$in-find if operator checks if at least one value from a specified array exists in the target field.
 //$all- ensures that all values provided in the query exist within the target array.
//$size- finds documents where the array contains an exact number of elements.
//^-	Matches the start of a string. 
$	-Matches the end of a string.db.students.find({ name: { $regex: "^A" } });//all students starting with a
.*	-Matches any characters (wildcard)

7.HIDING OR GETTING SPECIFIC fields
//db.leads.find({},{name:1 ,_id:0})-find name field only hide id with 0

8. AGGREGATES
//aggregation is process of processing documents and returning computed results.
//it works like find()method
//aggregation pipelines:it is an array,series of stages that process documents(modify or add elements in a document)
$match: Filters documents based on given conditions.
 Similar to the find() query but part of an aggregation pipeline.

$group: Groups documents together to apply aggregate functions (e.g., sum, average, max, etc.).
 This is how you perform operations like counting the number of documents or summing a field.

$project: Reshapes the documents, including adding or removing fields or applying expressions to modify values.

$sort: Orders documents by specified fields.

$skip and $limit: Skips a certain number of documents or limits the result to a specific number of documents.

$unwind: Deconstructs an array field from each document, outputting one document for each element of the array.

$lookup: Performs a left outer join with another collection to combine documents from two different collections.
var.orders.pipeline=[
    //$sort:order documents by specified field
    {$sort:{quantity:1}}//smallest to largest
    {$limit:3}
]
db.orders.aggregate(pipeline)

// Define the aggregation pipeline
var pipeline = [
    // Stage 1: Filter (Match) documents
    {
        $match: {
            // Only include orders where the size is "medium"
            // and the date is within the range 2021-01-01 to 2022-12-31
            size: "medium",
            date: {
                $gte: ISODate("2021-01-01"),
                $lt: ISODate("2022-12-31")
            }
        }
    },

    // Stage 2: Sort documents by quantity in descending order
    {
        $sort: {
            quantity: -1 // Sort by `quantity` field in descending order
        }
    },

    // Stage 3: Add a calculated field (`revenue`)
    {
        $addFields: {
            revenue: {
                // Calculate the total revenue for each order as price * quantity
                $multiply: ["$price", "$quantity"]
            }
        }
    },

    // Stage 4: Unwind arrays (if applicable)
    // Note: For this dataset, there's no array field, but we add it as an example.
    // Uncomment this block if your collection contains arrays.
    /*
    {
        $unwind: {
            path: "$arrayField", // Replace "arrayField" with the name of your array field
            preserveNullAndEmptyArrays: true // Keep documents even if the array is null/empty
        }
    },
    */

    // Stage 5: Group data by `name` and calculate aggregate metrics
    {
        $group: {
            _id: "$name", // Group by pizza name
            totalRevenue: { $sum: "$revenue" }, // Total revenue per pizza
            totalQuantity: { $sum: "$quantity" }, // Total quantity per pizza
            averagePrice: { $avg: "$price" }, // Average price per pizza
            minPrice: { $min: "$price" }, // Minimum price
            maxPrice: { $max: "$price" }, // Maximum price
            ordersCount: { $count: {} } // Count the number of documents (orders)
        }
    },

    // Stage 6: Add another calculated field for average revenue per order
    {
        $addFields: {
            avgRevenuePerOrder: {
                // Divide total revenue by the total number of orders
                $divide: ["$totalRevenue", "$ordersCount"]
            }
        }
    },

    // Stage 7: Sort grouped data by total revenue
    {
        $sort: {
            totalRevenue: -1 // Sort by `totalRevenue` in descending order
        }
    },

    // Stage 8: Limit the number of documents to 3 (e.g., top 3 pizzas by revenue)
    { 
        $limit: 3 
    },

    // Stage 9: Skip the first document in the result set
    {
        $skip: 1
    },

    // Stage 10: Count the remaining documents
    {
        $count: "remainingDocuments"
    }
];

// Execute the pipeline
db.orders.aggregate(pipeline);

9. INDEX
//An index  is a tool that makes searching through your data faster, like a table of contents in a book
Types of Indexes in MongoDB
MongoDB supports the following types of indexes:
1. Single Field Index: Index on a single field.
2. Compound Index: Index on multiple fields.
3. Multikey Index: Index for fields that contain arrays.
4. Text Index: Index for full-text search.
5. Geospatial Index: Index for geographical data.
6. Hashed Index: Index for hashed values, often used with sharding.
7. Wildcard Index: Dynamic indexing for all fields in a document.
//methods
// Create an index on the `name` field
db.orders.createIndex({ name: 1 });
// Retrieve indexes for the `orders` collection
db.orders.getIndexes();
// Drop the index named `name_1`
db.orders.dropIndex("name_1");
//sort, find
db.students.find().sort( { gpa: 1, name: -1 } )

10. DATA MODELLING
//Data modeling refers to the organization of data within a database and the links between related entities.
// Data in MongoDB has a flexible schema model, which means:
//Documents within a single collection are not required to have the same set of fields.
//A field's data type can differ between documents within a collection.
//Embedded Data
Embedded documents store related data in a single document structure.
//References
References store data in different documents them link them using  unique ids 
//For example, a customerId field in an orders collection indicates a reference to a document in a customers collection.
Denormalization vs Normalization
//Denormalization: Data duplication to optimize for read operations (fewer joins).
//Normalization: Breaking data into smaller tables (or collections) to avoid duplication.

